# Reference used: 
## https://dzone.com/articles/algorithm-week-homomorphic
## Sub References: https://www.cs.cmu.edu/~rwh/theses/okasaki.pdf, https://pdos.csail.mit.edu/papers/otfvec/paper.pdf, 

# here, sum = a + b + c + d + e -> sum is the key and a, b, ..., e are the subkeys that are generated from the key
# the homomorphic hash function is H(x) = g^x mod q

import random

# Constants used in the hash function
## Choose prime p
p = 257
## Choose q such that `p % q == 1` or `q | (p - 1)`
q = 257*6 + 1
## a random number g
g = 47

# hash message
m = [72, 101, 108, 108, 111]
h = []

# testing for kH(m + n + o) = H(km) + H(kn) + H(ko) = kH(m) + kH(n) + kH(o)
# testing for H(kx) = kH(x)
## k*H(x) = 
k = random.randint(1, 100)

# variables used in the hash function
sum = 0
product = 1
k_product = 1 

# compute the hash
## hash individual characters
## compute the hash of each individual character by raising g to the power of the character (mod q)
## compute the "sum" of the hashes of the individual characters by multiplying them (mod q)
for i in range(len(m)):
    temp = pow(g, m[i], q) 
    k_product *= pow(g, k*m[i], q) # or pow(temp, k, q)
    k_product %= q

    h.append(temp)
    product *= temp # 
    product %= q
product_hash = product
# k_product = pow(g, k, q)


## compute the sum of the characters
## hash that sum by raising g to the power of the sum (mod q)
for i in range(len(m)):
    sum += m[i]
    sum %= p
sum_hash = pow(g, sum, q)
k_sum = pow(g, k*sum, q)

print("message (primary key): ", m)
print("obfuscated sub keys (sent to each server): ", [k*i for i in m])
print("hashes (generated by each server): ", h)
print("sum_hash (hashing entire message - done by client): ", sum_hash)
print("product (hashing each block and then adding the hashes - done by the distributed network):", product_hash)
print("k_sum (obfuscated sum_hash): ", k_sum)
print("k_sum (obfuscated product_hash): ", k_product)

if(sum_hash == product_hash):
    print("Hashes are equal!")

if(k_sum == k_product):
    print("Obfuscated hashes are equal!")
